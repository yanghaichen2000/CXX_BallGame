#pragma kernel PlayerShoot
#pragma kernel UpdatePlayerBulletPosition


struct BulletDatum
{
    float3 pos;
    float3 dir;
    float speed;
    float radius;
    float damage;
    int bounces;
    float expirationTime;
    int valid;
};

RWStructuredBuffer<BulletDatum> playerBulletData;
RWStructuredBuffer<int> playerBulletStack;
RWStructuredBuffer<BulletDatum> playerShootRequestData;

int maxPlayerBulletNum;
int playerShootRequestNum;
float deltaTime;


[numthreads(128, 1, 1)]
void PlayerShoot(uint3 id : SV_DispatchThreadID)
{
    if (id.x < playerShootRequestNum)
    {
        int stackEnd = playerBulletStack[maxPlayerBulletNum];
        int stackIndexForThisThread = stackEnd - id.x;
        int newBulletIndex = playerBulletStack[stackIndexForThisThread];
        playerBulletData[newBulletIndex] = playerShootRequestData[id.x];
    }

    GroupMemoryBarrierWithGroupSync();
    
    if (id.x == 0)
        playerBulletStack[maxPlayerBulletNum] -= playerShootRequestNum;
}


[numthreads(64, 1, 1)]
void UpdatePlayerBulletPosition(uint3 id : SV_DispatchThreadID)
{
    BulletDatum datum = playerBulletData[id.x];
    if (datum.valid == 0)
        return;

    playerBulletData[id.x].pos = datum.pos + datum.speed * datum.dir * deltaTime;
}